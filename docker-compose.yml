services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80" # HTTP (Certbot 초기 인증 및 HTTPS 리디렉션용)
      - "443:443" # HTTPS
    volumes:
      # Nginx 설정 파일 (default.conf는 Dockerfile에서 COPY)
      # Certbot이 생성/수정하는 SSL 인증서 및 관련 설정들을 영구 보관
      - certbot_certs:/etc/letsencrypt
      # Certbot이 로그 등을 저장하는 경로 (선택적이지만 문제 해결에 유용)
      - certbot_lib:/var/lib/letsencrypt
      # React 앱 빌드 결과물 (Nginx Dockerfile에서 /workspace/dist 로 빌드 결과물을 준비)
      # 이 볼륨은 Dockerfile에서 이미 처리하므로 여기서는 명시적 마운트 불필요.
      # Nginx 로그 (선택 사항)
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - fastapi
    restart: unless-stopped
    networks:
      - app-network

  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    # FastAPI 컨테이너는 외부로 직접 포트를 노출할 필요가 없습니다.
    # Nginx가 프록시 역할을 하므로 Nginx를 통해서만 접근합니다.
    # ports:
    #   - "20100:20100" # 개발/디버깅 목적으로 직접 접근해야 하는 경우에만 사용
    volumes:
      - ./fastapi/logs:/app/logs # FastAPI 애플리케이션 로그를 호스트와 공유
      # 개발 시 소스코드 변경 즉시 반영을 위해 아래 주석 해제 가능
      # 단, Dockerfile에서 COPY . . 부분을 주석 처리해야 함
      # - ./fastapi:/app
    environment:
      # 필요한 환경 변수가 있다면 여기에 추가합니다.
      # 예: DB_HOST: your_db_host
      PYTHONUNBUFFERED: 1 # 파이썬 로그가 버퍼링 없이 즉시 출력되도록 설정
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

# Certbot 데이터 영구 저장을 위한 명명된 볼륨 정의
volumes:
  certbot_certs:
  certbot_lib: 